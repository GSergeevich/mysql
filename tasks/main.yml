---
# tasks file for roles/mysql

- name: mysql state check
  shell: mysql --version
  register: result
  ignore_errors: True
  tags:
   - mysql_check

- name: install epel-repo
  yum: name=epel-release state=present  

- debug: msg="MYSQL VERSION IS {{ result.stdout }}"
  ignore_errors: yes
  tags:
   - mysql_check

- name: mariadb installation (centos)
  yum: name='{{ packages }}' state=present update_cache=no
  vars:
    packages:       
      - mariadb-server
      - python-pip
      - python2-PyMySQL
      - MySQL-python
  tags:
   - mysql_install
   - mysql

- name: just force systemd to reread configs (2.4 and above)
  systemd: daemon_reload=yes


- name: create config for mariadb
  template: src=centos_mysql.conf.j2 dest=/etc/my.cnf.d/openstack.cnf owner=root group=root mode=0644
  tags:
   - mysql_config
   - mysql

- name: add limit to mysql service
  ini_file: path=/usr/lib/systemd/system/mariadb.service section=Service option=LimitNOFILE value={{ mysql_limit_nofile| default('100000') }}


- name: restart mariadb
  systemd: name=mariadb state=restarted enabled=yes daemon_reload=yes

- name: wait for mysqld to restart
  wait_for:
    host="{{ bind_address }}"
    port=3306
    delay=20
    timeout=300

- name: Check installed options
  stat: path=/root/.my.cnf
  register: optional_file

# 'localhost' needs to be the last item for idempotency, see
# http://ansible.cc/docs/modules.html#mysql-user
- name: update mysql root password for all root accounts
  mysql_user: name=root host={{ item }} password={{ mysql_root_password }} login_unix_socket="{{mysql_local_sock}}"
  with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost
  when:
   - optional_file.stat.exists == False


- name: copy .my.cnf file with root password credentials
  template: src=templates/my.cnf.j2 dest=/root/.my.cnf owner=root mode=0600
  when:
   - optional_file.stat.exists == False

- name: delete anonymous  user for $server_hostname
  mysql_user: user="" host="{{ ansible_hostname }}" state="absent" login_unix_socket="{{mysql_local_sock}}"
  when:
   - optional_file.stat.exists == False

- name: delete anonymous  user for localhost
  mysql_user: user="" state="absent" login_unix_socket="{{mysql_local_sock}}"
  when:
   - optional_file.stat.exists == False

- name: remove the MySQL test database
  mysql_db: db=test state=absent login_unix_socket="{{mysql_local_sock}}"
  when:
   - optional_file.stat.exists == False


